{"ast":null,"code":"import formatTypes from \"./formatTypes\"; // [[fill]align][sign][symbol][0][width][,][.precision][type]\n\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n  var match,\n      fill = match[1] || \" \",\n      align = match[2] || \">\",\n      sign = match[3] || \"-\",\n      symbol = match[4] || \"\",\n      zero = !!match[5],\n      width = match[6] && +match[6],\n      comma = !!match[7],\n      precision = match[8] && +match[8].slice(1),\n      type = match[9] || \"\"; // The \"n\" type is an alias for \",g\".\n\n  if (type === \"n\") comma = true, type = \"g\"; // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\"; // If zero fill is specified, padding goes after sign and before digits.\n\n  if (zero || fill === \"0\" && align === \"=\") zero = true, fill = \"0\", align = \"=\";\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\n\nFormatSpecifier.prototype.toString = function () {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? \"0\" : \"\") + (this.width == null ? \"\" : Math.max(1, this.width | 0)) + (this.comma ? \",\" : \"\") + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0)) + this.type;\n};","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/dash/node_modules/d3-format/src/formatSpecifier.js"],"names":["formatTypes","re","formatSpecifier","specifier","FormatSpecifier","prototype","match","exec","Error","fill","align","sign","symbol","zero","width","comma","precision","slice","type","toString","Math","max"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,IAAIC,EAAE,GAAG,uEAAT;AAEA,eAAe,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;AACjD,SAAO,IAAIC,eAAJ,CAAoBD,SAApB,CAAP;AACD;AAEDD,eAAe,CAACG,SAAhB,GAA4BD,eAAe,CAACC,SAA5C,C,CAAuD;;AAEvD,SAASD,eAAT,CAAyBD,SAAzB,EAAoC;AAClC,MAAI,EAAEG,KAAK,GAAGL,EAAE,CAACM,IAAH,CAAQJ,SAAR,CAAV,CAAJ,EAAmC,MAAM,IAAIK,KAAJ,CAAU,qBAAqBL,SAA/B,CAAN;AAEnC,MAAIG,KAAJ;AAAA,MACIG,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAL,IAAY,GADvB;AAAA,MAEII,KAAK,GAAGJ,KAAK,CAAC,CAAD,CAAL,IAAY,GAFxB;AAAA,MAGIK,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAL,IAAY,GAHvB;AAAA,MAIIM,MAAM,GAAGN,KAAK,CAAC,CAAD,CAAL,IAAY,EAJzB;AAAA,MAKIO,IAAI,GAAG,CAAC,CAACP,KAAK,CAAC,CAAD,CALlB;AAAA,MAMIQ,KAAK,GAAGR,KAAK,CAAC,CAAD,CAAL,IAAY,CAACA,KAAK,CAAC,CAAD,CAN9B;AAAA,MAOIS,KAAK,GAAG,CAAC,CAACT,KAAK,CAAC,CAAD,CAPnB;AAAA,MAQIU,SAAS,GAAGV,KAAK,CAAC,CAAD,CAAL,IAAY,CAACA,KAAK,CAAC,CAAD,CAAL,CAASW,KAAT,CAAe,CAAf,CAR7B;AAAA,MASIC,IAAI,GAAGZ,KAAK,CAAC,CAAD,CAAL,IAAY,EATvB,CAHkC,CAclC;;AACA,MAAIY,IAAI,KAAK,GAAb,EAAkBH,KAAK,GAAG,IAAR,EAAcG,IAAI,GAAG,GAArB,CAAlB,CAEA;AAFA,OAGK,IAAI,CAAClB,WAAW,CAACkB,IAAD,CAAhB,EAAwBA,IAAI,GAAG,EAAP,CAlBK,CAoBlC;;AACA,MAAIL,IAAI,IAAKJ,IAAI,KAAK,GAAT,IAAgBC,KAAK,KAAK,GAAvC,EAA6CG,IAAI,GAAG,IAAP,EAAaJ,IAAI,GAAG,GAApB,EAAyBC,KAAK,GAAG,GAAjC;AAE7C,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,MAAL,GAAcA,MAAd;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,KAAL,GAAaA,KAAb;AACA,OAAKC,SAAL,GAAiBA,SAAjB;AACA,OAAKE,IAAL,GAAYA,IAAZ;AACD;;AAEDd,eAAe,CAACC,SAAhB,CAA0Bc,QAA1B,GAAqC,YAAW;AAC9C,SAAO,KAAKV,IAAL,GACD,KAAKC,KADJ,GAED,KAAKC,IAFJ,GAGD,KAAKC,MAHJ,IAIA,KAAKC,IAAL,GAAY,GAAZ,GAAkB,EAJlB,KAKA,KAAKC,KAAL,IAAc,IAAd,GAAqB,EAArB,GAA0BM,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKP,KAAL,GAAa,CAAzB,CAL1B,KAMA,KAAKC,KAAL,GAAa,GAAb,GAAmB,EANnB,KAOA,KAAKC,SAAL,IAAkB,IAAlB,GAAyB,EAAzB,GAA8B,MAAMI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,KAAKL,SAAL,GAAiB,CAA7B,CAPpC,IAQD,KAAKE,IARX;AASD,CAVD","sourcesContent":["import formatTypes from \"./formatTypes\";\n\n// [[fill]align][sign][symbol][0][width][,][.precision][type]\nvar re = /^(?:(.)?([<>=^]))?([+\\-\\( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?([a-z%])?$/i;\n\nexport default function formatSpecifier(specifier) {\n  return new FormatSpecifier(specifier);\n}\n\nformatSpecifier.prototype = FormatSpecifier.prototype; // instanceof\n\nfunction FormatSpecifier(specifier) {\n  if (!(match = re.exec(specifier))) throw new Error(\"invalid format: \" + specifier);\n\n  var match,\n      fill = match[1] || \" \",\n      align = match[2] || \">\",\n      sign = match[3] || \"-\",\n      symbol = match[4] || \"\",\n      zero = !!match[5],\n      width = match[6] && +match[6],\n      comma = !!match[7],\n      precision = match[8] && +match[8].slice(1),\n      type = match[9] || \"\";\n\n  // The \"n\" type is an alias for \",g\".\n  if (type === \"n\") comma = true, type = \"g\";\n\n  // Map invalid types to the default format.\n  else if (!formatTypes[type]) type = \"\";\n\n  // If zero fill is specified, padding goes after sign and before digits.\n  if (zero || (fill === \"0\" && align === \"=\")) zero = true, fill = \"0\", align = \"=\";\n\n  this.fill = fill;\n  this.align = align;\n  this.sign = sign;\n  this.symbol = symbol;\n  this.zero = zero;\n  this.width = width;\n  this.comma = comma;\n  this.precision = precision;\n  this.type = type;\n}\n\nFormatSpecifier.prototype.toString = function() {\n  return this.fill\n      + this.align\n      + this.sign\n      + this.symbol\n      + (this.zero ? \"0\" : \"\")\n      + (this.width == null ? \"\" : Math.max(1, this.width | 0))\n      + (this.comma ? \",\" : \"\")\n      + (this.precision == null ? \"\" : \".\" + Math.max(0, this.precision | 0))\n      + this.type;\n};\n"]},"metadata":{},"sourceType":"module"}