{"ast":null,"code":"export default function (x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1; // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  } // Otherwise, double repeatedly to cover.\n  else if (x0 > x || x > x1 || y0 > y || y > y1) {\n      var z = x1 - x0,\n          node = this._root,\n          parent,\n          i;\n\n      switch (i = (y < (y0 + y1) / 2) << 1 | x < (x0 + x1) / 2) {\n        case 0:\n          {\n            do {\n              parent = new Array(4), parent[i] = node, node = parent;\n            } while ((z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1));\n\n            break;\n          }\n\n        case 1:\n          {\n            do {\n              parent = new Array(4), parent[i] = node, node = parent;\n            } while ((z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1));\n\n            break;\n          }\n\n        case 2:\n          {\n            do {\n              parent = new Array(4), parent[i] = node, node = parent;\n            } while ((z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y));\n\n            break;\n          }\n\n        case 3:\n          {\n            do {\n              parent = new Array(4), parent[i] = node, node = parent;\n            } while ((z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y));\n\n            break;\n          }\n      }\n\n      if (this._root && this._root.length) this._root = node;\n    } // If the quadtree covers the point already, just return.\n    else return this;\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/dash/node_modules/d3-quadtree/src/cover.js"],"names":["x","y","isNaN","x0","_x0","y0","_y0","x1","_x1","y1","_y1","Math","floor","z","node","_root","parent","i","Array","length"],"mappings":"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","sourcesContent":["export default function(x, y) {\n  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points\n\n  var x0 = this._x0,\n      y0 = this._y0,\n      x1 = this._x1,\n      y1 = this._y1;\n\n  // If the quadtree has no extent, initialize them.\n  // Integer extent are necessary so that if we later double the extent,\n  // the existing quadrant boundaries don’t change due to floating point error!\n  if (isNaN(x0)) {\n    x1 = (x0 = Math.floor(x)) + 1;\n    y1 = (y0 = Math.floor(y)) + 1;\n  }\n\n  // Otherwise, double repeatedly to cover.\n  else if (x0 > x || x > x1 || y0 > y || y > y1) {\n    var z = x1 - x0,\n        node = this._root,\n        parent,\n        i;\n\n    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {\n      case 0: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);\n        break;\n      }\n      case 1: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);\n        break;\n      }\n      case 2: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);\n        break;\n      }\n      case 3: {\n        do parent = new Array(4), parent[i] = node, node = parent;\n        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);\n        break;\n      }\n    }\n\n    if (this._root && this._root.length) this._root = node;\n  }\n\n  // If the quadtree covers the point already, just return.\n  else return this;\n\n  this._x0 = x0;\n  this._y0 = y0;\n  this._x1 = x1;\n  this._y1 = y1;\n  return this;\n}\n"]},"metadata":{},"sourceType":"module"}