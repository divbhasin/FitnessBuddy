{"ast":null,"code":"import adder from \"./adder\";\nimport { cartesian, cartesianCross, cartesianNormalizeInPlace } from \"./cartesian\";\nimport { asin, atan2, cos, epsilon, pi, quarterPi, sin, tau } from \"./math\";\nvar sum = adder();\nexport default function (polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta; // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  } // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ winding & 1;\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/cs348/project/rails-app/dashboard/node_modules/d3-geo/src/polygonContains.js"],"names":["adder","cartesian","cartesianCross","cartesianNormalizeInPlace","asin","atan2","cos","epsilon","pi","quarterPi","sin","tau","sum","polygon","point","lambda","phi","normal","angle","winding","reset","i","n","length","m","ring","point0","lambda0","phi0","sinPhi0","cosPhi0","j","lambda1","sinPhi1","cosPhi1","point1","phi1","delta","sign","absDelta","antimeridian","k","add","arc","intersection","phiArc"],"mappings":"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","sourcesContent":["import adder from \"./adder\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace} from \"./cartesian\";\nimport {asin, atan2, cos, epsilon, pi, quarterPi, sin, tau} from \"./math\";\n\nvar sum = adder();\n\nexport default function(polygon, point) {\n  var lambda = point[0],\n      phi = point[1],\n      normal = [sin(lambda), -cos(lambda), 0],\n      angle = 0,\n      winding = 0;\n\n  sum.reset();\n\n  for (var i = 0, n = polygon.length; i < n; ++i) {\n    if (!(m = (ring = polygon[i]).length)) continue;\n    var ring,\n        m,\n        point0 = ring[m - 1],\n        lambda0 = point0[0],\n        phi0 = point0[1] / 2 + quarterPi,\n        sinPhi0 = sin(phi0),\n        cosPhi0 = cos(phi0);\n\n    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {\n      var point1 = ring[j],\n          lambda1 = point1[0],\n          phi1 = point1[1] / 2 + quarterPi,\n          sinPhi1 = sin(phi1),\n          cosPhi1 = cos(phi1),\n          delta = lambda1 - lambda0,\n          sign = delta >= 0 ? 1 : -1,\n          absDelta = sign * delta,\n          antimeridian = absDelta > pi,\n          k = sinPhi0 * sinPhi1;\n\n      sum.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));\n      angle += antimeridian ? delta + sign * tau : delta;\n\n      // Are the longitudes either side of the point’s meridian (lambda),\n      // and are the latitudes smaller than the parallel (phi)?\n      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {\n        var arc = cartesianCross(cartesian(point0), cartesian(point1));\n        cartesianNormalizeInPlace(arc);\n        var intersection = cartesianCross(normal, arc);\n        cartesianNormalizeInPlace(intersection);\n        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);\n        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {\n          winding += antimeridian ^ delta >= 0 ? 1 : -1;\n        }\n      }\n    }\n  }\n\n  // First, determine whether the South pole is inside or outside:\n  //\n  // It is inside if:\n  // * the polygon winds around it in a clockwise direction.\n  // * the polygon does not (cumulatively) wind around it, but has a negative\n  //   (counter-clockwise) area.\n  //\n  // Second, count the (signed) number of times a segment crosses a lambda\n  // from the point to the South pole.  If it is zero, then the point is the\n  // same side as the South pole.\n\n  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);\n}\n"]},"metadata":{},"sourceType":"module"}