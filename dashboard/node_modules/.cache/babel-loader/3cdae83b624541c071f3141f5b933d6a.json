{"ast":null,"code":"import { slice } from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport { tickStep } from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\nexport default function () {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds.\n\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive\n    } // Remove any thresholds outside the domain.\n\n\n    var m = tz.length;\n\n    while (tz[0] <= x0) {\n      tz.shift(), --m;\n    }\n\n    while (tz[m - 1] > x1) {\n      tz.pop(), --m;\n    }\n\n    var bins = new Array(m + 1),\n        bin; // Initialize bins.\n\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    } // Assign data to bins by value, ignoring any outside the domain.\n\n\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function (_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function (_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function (_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/cs348/dashboard/node_modules/d3-array/src/histogram.js"],"names":["slice","bisect","constant","extent","identity","range","tickStep","sturges","value","domain","threshold","histogram","data","i","n","length","x","values","Array","xz","x0","x1","tz","isArray","Math","ceil","floor","m","shift","pop","bins","bin","push","_","arguments","thresholds","call"],"mappings":"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","sourcesContent":["import {slice} from \"./array\";\nimport bisect from \"./bisect\";\nimport constant from \"./constant\";\nimport extent from \"./extent\";\nimport identity from \"./identity\";\nimport range from \"./range\";\nimport {tickStep} from \"./ticks\";\nimport sturges from \"./threshold/sturges\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n"]},"metadata":{},"sourceType":"module"}