{"ast":null,"code":"import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTypes from \"./formatTypes\";\nimport { prefixExponent } from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\nvar prefixes = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", \"µ\", \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\", \"Z\", \"Y\"];\nexport default function (locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        type = specifier.type; // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\"; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = formatTypes[type],\n        maybeSuffix = !type || /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    precision = precision == null ? type ? 6 : 12 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i,\n          n,\n          c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value; // Perform the initial formatting.\n\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision); // If a negative value rounds to zero during formatting, treat as positive.\n\n        if (valueNegative && +value === 0) valueNegative = false; // Compute the prefix and suffix.\n\n        valuePrefix = (valueNegative ? sign === \"(\" ? sign : \"-\" : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\"); // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not \"0\", grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\"; // If the fill character is \"0\", grouping is applied after padding.\n\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\"; // Reconstruct the final output based on the desired alignment.\n\n      switch (align) {\n        case \"<\":\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case \"=\":\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case \"^\":\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function () {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/dash/node_modules/d3-format/src/locale.js"],"names":["exponent","formatGroup","formatNumerals","formatSpecifier","formatTypes","prefixExponent","identity","prefixes","locale","group","grouping","thousands","currency","decimal","numerals","percent","newFormat","specifier","fill","align","sign","symbol","zero","width","comma","precision","type","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","Math","max","min","format","value","valuePrefix","valueSuffix","i","n","c","valueNegative","abs","length","charCodeAt","slice","Infinity","padding","Array","join","toString","formatPrefix","f","e","floor","k","pow"],"mappings":"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","sourcesContent":["import exponent from \"./exponent\";\nimport formatGroup from \"./formatGroup\";\nimport formatNumerals from \"./formatNumerals\";\nimport formatSpecifier from \"./formatSpecifier\";\nimport formatTypes from \"./formatTypes\";\nimport {prefixExponent} from \"./formatPrefixAuto\";\nimport identity from \"./identity\";\n\nvar prefixes = [\"y\",\"z\",\"a\",\"f\",\"p\",\"n\",\"µ\",\"m\",\"\",\"k\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\",\"Y\"];\n\nexport default function(locale) {\n  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,\n      currency = locale.currency,\n      decimal = locale.decimal,\n      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,\n      percent = locale.percent || \"%\";\n\n  function newFormat(specifier) {\n    specifier = formatSpecifier(specifier);\n\n    var fill = specifier.fill,\n        align = specifier.align,\n        sign = specifier.sign,\n        symbol = specifier.symbol,\n        zero = specifier.zero,\n        width = specifier.width,\n        comma = specifier.comma,\n        precision = specifier.precision,\n        type = specifier.type;\n\n    // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n    var prefix = symbol === \"$\" ? currency[0] : symbol === \"#\" && /[boxX]/.test(type) ? \"0\" + type.toLowerCase() : \"\",\n        suffix = symbol === \"$\" ? currency[1] : /[%p]/.test(type) ? percent : \"\";\n\n    // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n    var formatType = formatTypes[type],\n        maybeSuffix = !type || /[defgprs%]/.test(type);\n\n    // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n    precision = precision == null ? (type ? 6 : 12)\n        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))\n        : Math.max(0, Math.min(20, precision));\n\n    function format(value) {\n      var valuePrefix = prefix,\n          valueSuffix = suffix,\n          i, n, c;\n\n      if (type === \"c\") {\n        valueSuffix = formatType(value) + valueSuffix;\n        value = \"\";\n      } else {\n        value = +value;\n\n        // Perform the initial formatting.\n        var valueNegative = value < 0;\n        value = formatType(Math.abs(value), precision);\n\n        // If a negative value rounds to zero during formatting, treat as positive.\n        if (valueNegative && +value === 0) valueNegative = false;\n\n        // Compute the prefix and suffix.\n        valuePrefix = (valueNegative ? (sign === \"(\" ? sign : \"-\") : sign === \"-\" || sign === \"(\" ? \"\" : sign) + valuePrefix;\n        valueSuffix = (type === \"s\" ? prefixes[8 + prefixExponent / 3] : \"\") + valueSuffix + (valueNegative && sign === \"(\" ? \")\" : \"\");\n\n        // Break the formatted value into the integer “value” part that can be\n        // grouped, and fractional or exponential “suffix” part that is not.\n        if (maybeSuffix) {\n          i = -1, n = value.length;\n          while (++i < n) {\n            if (c = value.charCodeAt(i), 48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      }\n\n      // If the fill character is not \"0\", grouping is applied before padding.\n      if (comma && !zero) value = group(value, Infinity);\n\n      // Compute the padding.\n      var length = valuePrefix.length + value.length + valueSuffix.length,\n          padding = length < width ? new Array(width - length + 1).join(fill) : \"\";\n\n      // If the fill character is \"0\", grouping is applied after padding.\n      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = \"\";\n\n      // Reconstruct the final output based on the desired alignment.\n      switch (align) {\n        case \"<\": value = valuePrefix + value + valueSuffix + padding; break;\n        case \"=\": value = valuePrefix + padding + value + valueSuffix; break;\n        case \"^\": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;\n        default: value = padding + valuePrefix + value + valueSuffix; break;\n      }\n\n      return numerals(value);\n    }\n\n    format.toString = function() {\n      return specifier + \"\";\n    };\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = \"f\", specifier)),\n        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,\n        k = Math.pow(10, -e),\n        prefix = prefixes[8 + e / 3];\n    return function(value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}\n"]},"metadata":{},"sourceType":"module"}