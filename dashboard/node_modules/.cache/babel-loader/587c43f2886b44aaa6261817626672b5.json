{"ast":null,"code":"import none from \"./none\";\nimport { sum } from \"./ascending\";\nexport default function (series) {\n  var n = series.length,\n      i,\n      j,\n      sums = series.map(sum),\n      order = none(series).sort(function (a, b) {\n    return sums[b] - sums[a];\n  }),\n      top = 0,\n      bottom = 0,\n      tops = [],\n      bottoms = [];\n\n  for (i = 0; i < n; ++i) {\n    j = order[i];\n\n    if (top < bottom) {\n      top += sums[j];\n      tops.push(j);\n    } else {\n      bottom += sums[j];\n      bottoms.push(j);\n    }\n  }\n\n  return bottoms.reverse().concat(tops);\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/cs348/dashboard/node_modules/d3-shape/src/order/insideOut.js"],"names":["none","sum","series","n","length","i","j","sums","map","order","sort","a","b","top","bottom","tops","bottoms","push","reverse","concat"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAAQC,GAAR,QAAkB,aAAlB;AAEA,eAAe,UAASC,MAAT,EAAiB;AAC9B,MAAIC,CAAC,GAAGD,MAAM,CAACE,MAAf;AAAA,MACIC,CADJ;AAAA,MAEIC,CAFJ;AAAA,MAGIC,IAAI,GAAGL,MAAM,CAACM,GAAP,CAAWP,GAAX,CAHX;AAAA,MAIIQ,KAAK,GAAGT,IAAI,CAACE,MAAD,CAAJ,CAAaQ,IAAb,CAAkB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAAE,WAAOL,IAAI,CAACK,CAAD,CAAJ,GAAUL,IAAI,CAACI,CAAD,CAArB;AAA2B,GAA9D,CAJZ;AAAA,MAKIE,GAAG,GAAG,CALV;AAAA,MAMIC,MAAM,GAAG,CANb;AAAA,MAOIC,IAAI,GAAG,EAPX;AAAA,MAQIC,OAAO,GAAG,EARd;;AAUA,OAAKX,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAhB,EAAmB,EAAEE,CAArB,EAAwB;AACtBC,IAAAA,CAAC,GAAGG,KAAK,CAACJ,CAAD,CAAT;;AACA,QAAIQ,GAAG,GAAGC,MAAV,EAAkB;AAChBD,MAAAA,GAAG,IAAIN,IAAI,CAACD,CAAD,CAAX;AACAS,MAAAA,IAAI,CAACE,IAAL,CAAUX,CAAV;AACD,KAHD,MAGO;AACLQ,MAAAA,MAAM,IAAIP,IAAI,CAACD,CAAD,CAAd;AACAU,MAAAA,OAAO,CAACC,IAAR,CAAaX,CAAb;AACD;AACF;;AAED,SAAOU,OAAO,CAACE,OAAR,GAAkBC,MAAlB,CAAyBJ,IAAzB,CAAP;AACD","sourcesContent":["import none from \"./none\";\nimport {sum} from \"./ascending\";\n\nexport default function(series) {\n  var n = series.length,\n      i,\n      j,\n      sums = series.map(sum),\n      order = none(series).sort(function(a, b) { return sums[b] - sums[a]; }),\n      top = 0,\n      bottom = 0,\n      tops = [],\n      bottoms = [];\n\n  for (i = 0; i < n; ++i) {\n    j = order[i];\n    if (top < bottom) {\n      top += sums[j];\n      tops.push(j);\n    } else {\n      bottom += sums[j];\n      bottoms.push(j);\n    }\n  }\n\n  return bottoms.reverse().concat(tops);\n}\n"]},"metadata":{},"sourceType":"module"}