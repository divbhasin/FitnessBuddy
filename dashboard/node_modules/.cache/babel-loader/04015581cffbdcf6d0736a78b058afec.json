{"ast":null,"code":"import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport { degrees, radians, sqrt } from \"../math\";\nimport { rotateRadians } from \"../rotation\";\nimport { transformer } from \"../transform\";\nimport { fitExtent, fitSize, fitWidth, fitHeight } from \"./fit\";\nimport resample from \"./resample\";\nvar transformRadians = transformer({\n  point: function point(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function point(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nexport default function projection(project) {\n  return projectionMutator(function () {\n    return project;\n  })();\n}\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150,\n      // scale\n  x = 480,\n      y = 250,\n      // translate\n  dx,\n      dy,\n      lambda = 0,\n      phi = 0,\n      // center\n  deltaLambda = 0,\n      deltaPhi = 0,\n      deltaGamma = 0,\n      rotate,\n      projectRotate,\n      // rotate\n  theta = null,\n      preclip = clipAntimeridian,\n      // clip angle\n  x0 = null,\n      y0,\n      x1,\n      y1,\n      postclip = identity,\n      // clip extent\n  delta2 = 0.5,\n      projectResample = resample(projectTransform, delta2),\n      // precision\n  cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function (stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function (_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function (_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function (_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function (_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function (_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function (_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function (_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function (_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function (_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function (extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function (size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function (width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function (height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function () {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}","map":{"version":3,"sources":["/Users/zameerbharwani/Desktop/dash/node_modules/d3-geo/src/projection/index.js"],"names":["clipAntimeridian","clipCircle","clipRectangle","compose","identity","degrees","radians","sqrt","rotateRadians","transformer","fitExtent","fitSize","fitWidth","fitHeight","resample","transformRadians","point","x","y","stream","transformRotate","rotate","r","projection","project","projectionMutator","projectAt","k","dx","dy","lambda","phi","deltaLambda","deltaPhi","deltaGamma","projectRotate","theta","preclip","x0","y0","x1","y1","postclip","delta2","projectResample","projectTransform","cache","cacheStream","invert","_","arguments","length","undefined","reset","clipAngle","clipExtent","scale","recenter","translate","center","precision","extent","object","size","width","height","apply"],"mappings":"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","sourcesContent":["import clipAntimeridian from \"../clip/antimeridian\";\nimport clipCircle from \"../clip/circle\";\nimport clipRectangle from \"../clip/rectangle\";\nimport compose from \"../compose\";\nimport identity from \"../identity\";\nimport {degrees, radians, sqrt} from \"../math\";\nimport {rotateRadians} from \"../rotation\";\nimport {transformer} from \"../transform\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit\";\nimport resample from \"./resample\";\n\nvar transformRadians = transformer({\n  point: function(x, y) {\n    this.stream.point(x * radians, y * radians);\n  }\n});\n\nfunction transformRotate(rotate) {\n  return transformer({\n    point: function(x, y) {\n      var r = rotate(x, y);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\n\nexport default function projection(project) {\n  return projectionMutator(function() { return project; })();\n}\n\nexport function projectionMutator(projectAt) {\n  var project,\n      k = 150, // scale\n      x = 480, y = 250, // translate\n      dx, dy, lambda = 0, phi = 0, // center\n      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate\n      theta = null, preclip = clipAntimeridian, // clip angle\n      x0 = null, y0, x1, y1, postclip = identity, // clip extent\n      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision\n      cache,\n      cacheStream;\n\n  function projection(point) {\n    point = projectRotate(point[0] * radians, point[1] * radians);\n    return [point[0] * k + dx, dy - point[1] * k];\n  }\n\n  function invert(point) {\n    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);\n    return point && [point[0] * degrees, point[1] * degrees];\n  }\n\n  function projectTransform(x, y) {\n    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];\n  }\n\n  projection.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));\n  };\n\n  projection.preclip = function(_) {\n    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;\n  };\n\n  projection.postclip = function(_) {\n    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;\n  };\n\n  projection.clipAngle = function(_) {\n    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;\n  };\n\n  projection.clipExtent = function(_) {\n    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];\n  };\n\n  projection.scale = function(_) {\n    return arguments.length ? (k = +_, recenter()) : k;\n  };\n\n  projection.translate = function(_) {\n    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];\n  };\n\n  projection.center = function(_) {\n    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];\n  };\n\n  projection.rotate = function(_) {\n    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];\n  };\n\n  projection.precision = function(_) {\n    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);\n  };\n\n  projection.fitExtent = function(extent, object) {\n    return fitExtent(projection, extent, object);\n  };\n\n  projection.fitSize = function(size, object) {\n    return fitSize(projection, size, object);\n  };\n\n  projection.fitWidth = function(width, object) {\n    return fitWidth(projection, width, object);\n  };\n\n  projection.fitHeight = function(height, object) {\n    return fitHeight(projection, height, object);\n  };\n\n  function recenter() {\n    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);\n    var center = project(lambda, phi);\n    dx = x - center[0] * k;\n    dy = y + center[1] * k;\n    return reset();\n  }\n\n  function reset() {\n    cache = cacheStream = null;\n    return projection;\n  }\n\n  return function() {\n    project = projectAt.apply(this, arguments);\n    projection.invert = project.invert && invert;\n    return recenter();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}